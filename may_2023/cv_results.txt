#################### reviewText ####################

Running the submit_v4 function...

Selected features: {'txt': ['reviewText']}

Pipeline built successfully.

Full GridSearchCV pipeline built successfully.
GridSearchCV(cv=10,
             estimator=Pipeline(steps=[('ct',
                                        ColumnTransformer(transformers=[('txt_reviewText',
                                                                         Pipeline(steps=[('tvec',
                                                                                          TfidfVectorizer(ngram_range=(1,
                                                                                                                       3),
                                                                                                          strip_accents='unicode'))]),
                                                                         'reviewText')])),
                                       ('model',
                                        LogisticRegression(C=1, max_iter=100000,
                                                           solver='liblinear'))]),
             n_jobs=-1,
             param_grid={'model__C': [1], 'model__dual': [False],
                         'model__fit_intercept': [True],
                         'model__solver': ['saga']},
             scoring='f1_micro')

Check 1 complete.
Shape of X_train: (162758, 1)
Features in X_train: Index(['reviewText'], dtype='object')

Training started with full pipeline...

Check 2 complete.
Details of the best model using full pipeline (GridSearchCV) on X_train: 
Best Params: {'model__C': 1, 'model__dual': False, 'model__fit_intercept': True, 'model__solver': 'saga'}
Best Score: 0.7990083483111413
Confusion matrix and f1-score for rows which have no reviewText in X_train: 
[[   0 2405]
 [   0 4042]]
0.6269582751667442

Check 3 complete.
Shape of X_test: (55315, 1)
Features in X_train: Index(['reviewText'], dtype='object')

Check 4 complete.
Details of the best model using full pipeline (GridSearchCV) on X_train: 
Best Estimator: Pipeline(steps=[('ct',
                 ColumnTransformer(transformers=[('txt_reviewText',
                                                  Pipeline(steps=[('tvec',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                3),
                                                                                   strip_accents='unicode'))]),
                                                  'reviewText')])),
                ('model',
                 LogisticRegression(C=1, max_iter=100000, solver='saga'))])
Best Params: {'model__C': 1, 'model__dual': False, 'model__fit_intercept': True, 'model__solver': 'saga'}
Best Score: 0.7990083483111413
Best Index: 0
Refit Time: 36.73675322532654
Shape of CV results dataframe: (1, 22)

Successfully created the submission file!!!
{'mean_fit_time': array([46.26562722]),
 'std_fit_time': array([5.63966074]),
 'mean_score_time': array([1.73051202]),
 'std_score_time': array([0.17070933]),
 'param_model__C': masked_array(data=[1],
              mask=[False],
        fill_value='?',
             dtype=object),
 'param_model__dual': masked_array(data=[False],
              mask=[False],
        fill_value='?',
             dtype=object),
 'param_model__fit_intercept': masked_array(data=[True],
              mask=[False],
        fill_value='?',
             dtype=object),
 'param_model__solver': masked_array(data=['saga'],
              mask=[False],
        fill_value='?',
             dtype=object),
 'params': [{'model__C': 1,
   'model__dual': False,
   'model__fit_intercept': True,
   'model__solver': 'saga'}],
 'split0_test_score': array([0.79902925]),
 'split1_test_score': array([0.79884493]),
 'split2_test_score': array([0.79939789]),
 'split3_test_score': array([0.79761612]),
 'split4_test_score': array([0.80007373]),
 'split5_test_score': array([0.80025805]),
 'split6_test_score': array([0.79786188]),
 'split7_test_score': array([0.79823052]),
 'split8_test_score': array([0.80288786]),
 'split9_test_score': array([0.79588326]),
 'mean_test_score': array([0.79900835]),
 'std_test_score': array([0.00177624]),
 'rank_test_score': array([1], dtype=int32)}






#################### reviewText + Vocabulary=common_1_2_3_grams ####################

Running the submit_v4 function...

Selected features: {'txt': ['reviewText', 'reviewText_3']}

Pipeline built successfully.

Full GridSearchCV pipeline built successfully.
GridSearchCV(cv=10,
             estimator=Pipeline(steps=[('ct',
                                        ColumnTransformer(transformers=[('txt_reviewText',
                                                                         Pipeline(steps=[('tvec',
                                                                                          TfidfVectorizer(ngram_range=(1,
                                                                                                                       3),
                                                                                                          strip_accents='unicode'))]),
                                                                         'reviewText'),
                                                                        ('txt_reviewText_3',
                                                                         Pipeline(steps=[('tvec',
                                                                                          TfidfVectorizer(ngram_range=(1,
                                                                                                                       3),
                                                                                                          strip_accents='unicode',
                                                                                                          vocabulary={'aa',
                                                                                                                      'aa '
                                                                                                                      'milne',
                                                                                                                      'aah',
                                                                                                                      'aaliyah',
                                                                                                                      'a...
                                                                                                                      'abandoned',
                                                                                                                      'abandoned '
                                                                                                                      'good',
                                                                                                                      'abandoning',
                                                                                                                      'abandoning '
                                                                                                                      'logic',
                                                                                                                      'abandoning '
                                                                                                                      'traditional',
                                                                                                                      'abandonment',
                                                                                                                      'abandonment '
                                                                                                                      'adoption', ...}))]),
                                                                         'reviewText_3')])),
                                       ('model',
                                        LogisticRegression(C=1, max_iter=100000,
                                                           solver='liblinear'))]),
             n_jobs=-1,
             param_grid={'model__C': [1], 'model__dual': [False],
                         'model__fit_intercept': [True],
                         'model__solver': ['saga']},
             scoring='f1_micro')

Check 1 complete.
Shape of X_train: (162758, 2)
Features in X_train: Index(['reviewText', 'reviewText_3'], dtype='object')

Training started with full pipeline...

Check 2 complete.
Details of the best model using full pipeline (GridSearchCV) on X_train: 
Best Params: {'model__C': 1, 'model__dual': False, 'model__fit_intercept': True, 'model__solver': 'saga'}
Best Score: 0.8154622164739654
Confusion matrix and f1-score for rows which have no reviewText in X_train: 
[[   0 2405]
 [   0 4042]]
0.6269582751667442

Check 3 complete.
Shape of X_test: (55315, 2)
Features in X_train: Index(['reviewText', 'reviewText_3'], dtype='object')

Check 4 complete.
Details of the best model using full pipeline (GridSearchCV) on X_train: 
Best Estimator: Pipeline(steps=[('ct',
                 ColumnTransformer(transformers=[('txt_reviewText',
                                                  Pipeline(steps=[('tvec',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                3),
                                                                                   strip_accents='unicode'))]),
                                                  'reviewText'),
                                                 ('txt_reviewText_3',
                                                  Pipeline(steps=[('tvec',
                                                                   TfidfVectorizer(ngram_range=(1,
                                                                                                3),
                                                                                   strip_accents='unicode',
                                                                                   vocabulary={'aa',
                                                                                               'aa '
                                                                                               'milne',
                                                                                               'aah',
                                                                                               'aaliyah',
                                                                                               'aamir',
                                                                                               'aamir '
                                                                                               'khan',
                                                                                               'aan',
                                                                                               'aa...
                                                                                               'seltzer',
                                                                                               'aaron '
                                                                                               'sorkin',
                                                                                               'aaron '
                                                                                               'sorkin '
                                                                                               'movie',
                                                                                               'aaron '
                                                                                               'sorkin '
                                                                                               'ricardos',
                                                                                               'aaron '
                                                                                               'sorkin '
                                                                                               'script',
                                                                                               'aaron '
                                                                                               'spelling',
                                                                                               'aarp',
                                                                                               'ab',
                                                                                               'abandon',
                                                                                               'abandoned',
                                                                                               'abandoned '
                                                                                               'good',
                                                                                               'abandoning',
                                                                                               'abandoning '
                                                                                               'logic',
                                                                                               'abandoning '
                                                                                               'traditional',
                                                                                               'abandonment',
                                                                                               'abandonment '
                                                                                               'adoption', ...}))]),
                                                  'reviewText_3')])),
                ('model',
                 LogisticRegression(C=1, max_iter=100000, solver='saga'))])
Best Params: {'model__C': 1, 'model__dual': False, 'model__fit_intercept': True, 'model__solver': 'saga'}
Best Score: 0.8154622164739654
Best Index: 0
Refit Time: 54.651090145111084
Shape of CV results dataframe: (1, 22)

Successfully created the submission file!!!
{'mean_fit_time': array([66.57318392]),
 'std_fit_time': array([9.00430262]),
 'mean_score_time': array([3.12173536]),
 'std_score_time': array([0.3686787]),
 'param_model__C': masked_array(data=[1],
              mask=[False],
        fill_value='?',
             dtype=object),
 'param_model__dual': masked_array(data=[False],
              mask=[False],
        fill_value='?',
             dtype=object),
 'param_model__fit_intercept': masked_array(data=[True],
              mask=[False],
        fill_value='?',
             dtype=object),
 'param_model__solver': masked_array(data=['saga'],
              mask=[False],
        fill_value='?',
             dtype=object),
 'params': [{'model__C': 1,
   'model__dual': False,
   'model__fit_intercept': True,
   'model__solver': 'saga'}],
 'split0_test_score': array([0.81647825]),
 'split1_test_score': array([0.81402064]),
 'split2_test_score': array([0.81531089]),
 'split3_test_score': array([0.81801425]),
 'split4_test_score': array([0.81549521]),
 'split5_test_score': array([0.81912018]),
 'split6_test_score': array([0.81285328]),
 'split7_test_score': array([0.81297616]),
 'split8_test_score': array([0.81671275]),
 'split9_test_score': array([0.81364055]),
 'mean_test_score': array([0.81546222]),
 'std_test_score': array([0.00202231]),
 'rank_test_score': array([1], dtype=int32)}